{"version":3,"file":"component---src-pages-index-js-be7571c083d501efb3cd.js","mappings":"qMA8HA,EAhGoB,WAClB,IAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cA4CtBC,EAAO,GACbC,QAAQC,IAAIJ,EAAKE,MACjB,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAKE,KAAKI,MAAMC,OAAQF,IAAK,CAE/C,IAAMG,EAAUR,EAAKE,KAAKI,MAAMD,GAAGI,KAAKC,KAAKC,MAAM,KAAK,GACnDT,EAAKM,KAAUN,EAAKM,GAAW,IACpCN,EAAKM,GAASI,KAAKZ,EAAKE,KAAKI,MAAMD,GAAGI,KAAKI,iBAG7C,IAAMC,EAASd,EAAKe,QAAQC,MAAMC,MAAK,SAACC,EAAGC,GACzC,OAAO,IAAIC,KAAKD,EAAEE,KAAK,IAAM,IAAID,KAAKF,EAAEG,KAAK,OAG/C,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAM,2BACVR,EAAOS,KAAI,SAAAP,GACV,IAAMK,EAAO,IAAID,KAAKA,KAAKI,MAAMR,EAAMK,OACvC,OACE,2BACE,wBAAMI,UC7FM,qCD+FR,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC7GJ,EAAKK,YAEP,IACDL,EAAKM,UANR,KAMqBN,EAAKO,eAE1B,2BACA,uBAAKH,UCzFS,uCD0FXT,EAAMV,MACJW,MAAK,SAACC,EAAGC,GAAJ,OAAUC,KAAKI,MAAMN,EAAET,KAAKY,MAAQD,KAAKI,MAAML,EAAEV,KAAKY,SAC3DE,KAAI,SAAAM,GACH,IApGH,EAAEC,EAAMC,EAAOC,EAAMT,EAoGZU,EAAY/B,EAAK2B,EAAKpB,KAAKc,MAAQrB,EAAI,KACvCgC,EAAQ,IAAId,KAAKS,EAAKpB,KAAKY,MAAMc,aAAeF,EAAU1B,OAEhE,OAvGH,EAuGgB,CACXuB,KAAMD,EAAKpB,KAAK2B,OAAON,KACvBE,KAAMH,EAAKpB,KAAK2B,OAAOJ,KACvBT,IAAKM,EAAKpB,KAAKc,IACfQ,OAAOM,EAAAA,EAAAA,GAASJ,EAAUC,KA3G7BJ,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAAMT,EAAU,EAAVA,IAEhC,qBAAGe,IAAKR,EAAMS,KAAMT,GAClB,uBAAKL,UCVY,oCDWf,gBAAC,EAAAe,EAAD,CAAaf,UCCK,sCDD+BgB,aCEnC,kCDFsEV,MAAOA,EAAOW,UAAU,QAAQC,IAAI,KACxH,uBAAKlB,UCTc,wCDUjB,uBAAKA,UAAWO,EAAKY,IAAIC,MAAQb,EAAKc,KAAKD,MCP5B,qCADC,uCDSd,uBAAKpB,UCPI,kCDO4BF,EAAIwB,eACzC,uBAAKtB,UCPW,yCDQbO,EAAKY,IAAII,QADZ,KACuBhB,EAAKc,KAAKE,SAEjC,uBAAKvB,UCPQ,sCDOb,QACA,uBAAKA,UCVS,uCDU4BO,EAAKY,IAAIC,OACnD,uBAAKpB,UCVS,uCDUd,SACA,uBAAKA,UCnBU,wCDmB4BO,EAAKc,KAAKD","sources":["webpack://qtube/./src/pages/index.js","webpack://qtube/./src/pages/matches.module.scss"],"sourcesContent":["import * as React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport * as matchStyle from \"./matches.module.scss\"\n\nconst Match = ({ slug, image, team, map }) => {\n  return (\n    <a key={slug} href={slug}>\n      <div className={matchStyle.container}>\n        <GatsbyImage className={matchStyle.mapContainer} imgClassName={matchStyle.mapImage} image={image} objectFit=\"scale\" alt=\"\" />\n        <div className={matchStyle.infoContainer}>\n          <div className={team.red.frags > team.blue.frags ? matchStyle.infoGridRed : matchStyle.infoGridBlue}>\n            <div className={matchStyle.infoMap}>{map.toUpperCase()}</div>\n            <div className={matchStyle.infoNumPlayers}>\n              {team.red.players}on{team.blue.players}\n            </div>\n            <div className={matchStyle.infoTeamRed}>Red:</div>\n            <div className={matchStyle.infoRedFrags}>{team.red.frags}</div>\n            <div className={matchStyle.infoTeamBlue}>Blue:</div>\n            <div className={matchStyle.infoBlueFrags}>{team.blue.frags}</div>\n          </div>\n        </div>\n      </div>\n    </a>\n  )\n}\n\nconst MatchesPage = () => {\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      matches: allMatchesJson {\n        group(field: fields___sort_date) {\n          date: distinct(field: fields___date)\n          edges {\n            node {\n              demo\n              id\n              map\n              date\n              fields {\n                slug\n                sort_date\n                team {\n                  red {\n                    frags\n                    players\n                  }\n                  blue {\n                    frags\n                    players\n                  }\n                }\n              }\n              duration\n            }\n          }\n        }\n      }\n\n      maps: allFile(filter: { dir: { regex: \"//maps//\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              gatsbyImageData(width: 500)\n            }\n            name\n          }\n        }\n      }\n    }\n  `)\n\n  const maps = {}\n  console.log(data.maps);\n  for (let i = 0; i < data.maps.edges.length; i++) {\n    \n    const mapName = data.maps.edges[i].node.name.split(\".\")[0]\n    if (!maps[mapName]) maps[mapName] = []\n    maps[mapName].push(data.maps.edges[i].node.childImageSharp)\n  }\n\n  const sorted = data.matches.group.sort((a, b) => {\n    return new Date(b.date[0]) - new Date(a.date[0])\n  })\n\n  return (\n    <Layout>\n      <Seo title=\"QuakeWorld CTF Matches\" />\n      {sorted.map(group => {\n        const date = new Date(Date.parse(group.date))\n        return (\n          <div>\n            <span className={matchStyle.dateHeader}>\n              {\n                [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][\n                  date.getMonth()\n                ]\n              }{\" \"}\n              {date.getDate()}, {date.getFullYear()}\n            </span>\n            <br />\n            <div className={matchStyle.matchListing}>\n              {group.edges\n                .sort((a, b) => Date.parse(a.node.date) - Date.parse(b.node.date))\n                .map(edge => {\n                  const mapImages = maps[edge.node.map] || maps[\"e2m2\"] // TODO: Add more screenshots\n                  const index = new Date(edge.node.date).getMinutes() % mapImages.length\n\n                  return Match({\n                    slug: edge.node.fields.slug,\n                    team: edge.node.fields.team,\n                    map: edge.node.map,\n                    image: getImage(mapImages[index]),\n                  })\n                })}\n            </div>\n          </div>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default MatchesPage\n","// extracted by mini-css-extract-plugin\nexport var container = \"matches-module--container--ukG+x\";\nexport var dateHeader = \"matches-module--dateHeader--6jPze\";\nexport var infoBlueFrags = \"matches-module--infoBlueFrags--7eAUA\";\nexport var infoContainer = \"matches-module--infoContainer--OqR3U\";\nexport var infoGrid = \"matches-module--infoGrid--WMEVm\";\nexport var infoGridBlue = \"matches-module--infoGridBlue--df2xO\";\nexport var infoGridRed = \"matches-module--infoGridRed--TwmO-\";\nexport var infoMap = \"matches-module--infoMap--+6EKL\";\nexport var infoNumPlayers = \"matches-module--infoNumPlayers--fWzHV\";\nexport var infoRedFrags = \"matches-module--infoRedFrags--ICJN1\";\nexport var infoTeamBlue = \"matches-module--infoTeamBlue--htOeS\";\nexport var infoTeamRed = \"matches-module--infoTeamRed--+kek1\";\nexport var mapContainer = \"matches-module--mapContainer--9BbS3\";\nexport var mapImage = \"matches-module--mapImage--0CBZS\";\nexport var matchListing = \"matches-module--matchListing--HSX+x\";"],"names":["data","useStaticQuery","maps","console","log","i","edges","length","mapName","node","name","split","push","childImageSharp","sorted","matches","group","sort","a","b","Date","date","title","map","parse","className","getMonth","getDate","getFullYear","edge","slug","image","team","mapImages","index","getMinutes","fields","getImage","key","href","G","imgClassName","objectFit","alt","red","frags","blue","toUpperCase","players"],"sourceRoot":""}